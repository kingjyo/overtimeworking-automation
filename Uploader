<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>엑셀 파일 업로더</title>
  <style>
    body {
      font-family: 'Malgun Gothic', sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f5f5f5;
    }
    
    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 30px;
    }
    
    .upload-area {
      border: 3px dashed #4285f4;
      border-radius: 10px;
      padding: 60px;
      text-align: center;
      background-color: #f8f9fa;
      transition: all 0.3s ease;
      cursor: pointer;
      margin-bottom: 30px;
    }
    
    .upload-area:hover {
      background-color: #e8f0fe;
      border-color: #1a73e8;
    }
    
    .upload-area.dragging {
      background-color: #e8f0fe;
      border-color: #1a73e8;
      transform: scale(1.02);
    }
    
    .upload-icon {
      font-size: 48px;
      color: #4285f4;
      margin-bottom: 20px;
    }
    
    .upload-text {
      font-size: 18px;
      color: #5f6368;
      margin-bottom: 10px;
    }
    
    .upload-subtext {
      font-size: 14px;
      color: #9aa0a6;
    }
    
    .file-list {
      margin-top: 30px;
    }
    
    .file-item {
      background: #f8f9fa;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s ease;
    }
    
    .file-item.success {
      background: #e6f4ea;
      border: 1px solid #34a853;
    }
    
    .file-item.error {
      background: #fce8e6;
      border: 1px solid #ea4335;
    }
    
    .file-item.processing {
      background: #e8f0fe;
      border: 1px solid #4285f4;
    }
    
    .file-name {
      font-weight: bold;
      color: #333;
    }
    
    .file-status {
      font-size: 14px;
      color: #666;
    }
    
    .upload-button {
      background: #4285f4;
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 16px;
      border-radius: 6px;
      cursor: pointer;
      width: 100%;
      margin-top: 20px;
      transition: background 0.3s ease;
      display: none;
    }
    
    .upload-button:hover {
      background: #1a73e8;
    }
    
    .upload-button:disabled {
      background: #dadce0;
      cursor: not-allowed;
    }
    
    .progress-bar {
      width: 100%;
      height: 4px;
      background: #e0e0e0;
      border-radius: 2px;
      margin-top: 10px;
      overflow: hidden;
      display: none;
    }
    
    .progress-fill {
      height: 100%;
      background: #4285f4;
      width: 0%;
      transition: width 0.3s ease;
    }
    
    .info-message {
      margin-top: 20px;
      padding: 15px;
      background: #e3f2fd;
      border: 1px solid #1976d2;
      border-radius: 8px;
      font-size: 14px;
      color: #1976d2;
    }
    
    .info-message ul {
      margin: 10px 0 0 20px;
      padding: 0;
    }
    
    .debug-console {
      margin-top: 30px;
      padding: 15px;
      background: #1e1e1e;
      color: #d4d4d4;
      border-radius: 8px;
      font-family: 'Courier New', monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
      display: none;
    }
    
    .debug-line {
      margin-bottom: 5px;
      padding: 2px 0;
    }
    
    .debug-line.error {
      color: #f48771;
    }
    
    .debug-line.success {
      color: #89d185;
    }
    
    .debug-line.info {
      color: #75beff;
    }
    
    .debug-line.warning {
      color: #ffcc00;
    }
    
    .toggle-debug {
      margin-top: 20px;
      font-size: 12px;
      color: #666;
      cursor: pointer;
      text-decoration: underline;
    }
    
    input[type="file"] {
      display: none;
    }
    
    .error-message {
      color: #ea4335;
      font-size: 14px;
      margin-top: 10px;
      display: none;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>연장근무 엑셀 파일 업로더</h1>
    
    <div class="upload-area" id="uploadArea">
      <div class="upload-icon">📁</div>
      <div class="upload-text">엑셀 파일을 여기에 드래그하세요</div>
      <div class="upload-subtext">또는 클릭하여 파일 선택</div>
      <input type="file" id="fileInput" multiple accept=".xlsx,.xls" />
    </div>
    
    <div class="file-list" id="fileList"></div>
    
    <button class="upload-button" id="uploadButton">업로드 시작</button>
    
    <div class="progress-bar" id="progressBar">
      <div class="progress-fill" id="progressFill"></div>
    </div>
    
    <div class="error-message" id="errorMessage"></div>
    
    <div class="info-message">
      <strong>업로드 안내</strong>
      <ul>
        <li>파일명이 시트 이름이 됩니다 (예: "2024년 10월 (축산).xlsx")</li>
        <li>날짜 열은 자동으로 YYYY-MM-DD 형식으로 변환됩니다</li>
        <li>여러 파일을 한 번에 업로드할 수 있습니다</li>
      </ul>
    </div>
    
    <div class="toggle-debug" id="toggleDebug">디버그 콘솔 표시</div>
    <div class="debug-console" id="debugConsole"></div>
  </div>
  
  <script>
    let selectedFiles = [];
    let debugVisible = false;
    
    const uploadArea = document.getElementById('uploadArea');
    const fileInput = document.getElementById('fileInput');
    const fileList = document.getElementById('fileList');
    const uploadButton = document.getElementById('uploadButton');
    const progressBar = document.getElementById('progressBar');
    const progressFill = document.getElementById('progressFill');
    const debugConsole = document.getElementById('debugConsole');
    const toggleDebug = document.getElementById('toggleDebug');
    const errorMessage = document.getElementById('errorMessage');
    
    // 디버그 토글
    toggleDebug.addEventListener('click', () => {
      debugVisible = !debugVisible;
      debugConsole.style.display = debugVisible ? 'block' : 'none';
      toggleDebug.textContent = debugVisible ? '디버그 콘솔 숨기기' : '디버그 콘솔 표시';
    });
    
    // 디버그 로그 추가
    function addDebugLog(message, type = 'info') {
      const line = document.createElement('div');
      line.className = `debug-line ${type}`;
      const timestamp = new Date().toLocaleTimeString();
      line.textContent = `[${timestamp}] ${message}`;
      debugConsole.appendChild(line);
      debugConsole.scrollTop = debugConsole.scrollHeight;
    }
    
    // 에러 메시지 표시
    function showError(message) {
      errorMessage.textContent = message;
      errorMessage.style.display = 'block';
      setTimeout(() => {
        errorMessage.style.display = 'none';
      }, 5000);
    }
    
    // 드래그 앤 드롭 이벤트
    uploadArea.addEventListener('click', () => fileInput.click());
    
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('dragging');
    });
    
    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('dragging');
    });
    
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('dragging');
      handleFiles(e.dataTransfer.files);
    });
    
    fileInput.addEventListener('change', (e) => {
      handleFiles(e.target.files);
    });
    
    // 파일 처리
    function handleFiles(files) {
      selectedFiles = Array.from(files).filter(file => 
        file.name.endsWith('.xlsx') || file.name.endsWith('.xls')
      );
      
      if (selectedFiles.length === 0) {
        showError('엑셀 파일만 업로드할 수 있습니다.');
        return;
      }
      
      addDebugLog(`${selectedFiles.length}개의 파일이 선택되었습니다.`, 'info');
      displayFiles();
      uploadButton.style.display = 'block';
    }
    
    // 파일 목록 표시
    function displayFiles() {
      fileList.innerHTML = '';
      selectedFiles.forEach((file, index) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.id = `file-${index}`;
        
        const fileName = document.createElement('div');
        fileName.className = 'file-name';
        fileName.textContent = file.name;
        
        const fileStatus = document.createElement('div');
        fileStatus.className = 'file-status';
        fileStatus.textContent = '대기중';
        fileStatus.id = `status-${index}`;
        
        fileItem.appendChild(fileName);
        fileItem.appendChild(fileStatus);
        fileList.appendChild(fileItem);
      });
    }
    
    // 업로드 버튼 클릭
    uploadButton.addEventListener('click', async () => {
      uploadButton.disabled = true;
      progressBar.style.display = 'block';
      addDebugLog('업로드 시작...', 'info');
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const fileItem = document.getElementById(`file-${i}`);
        const statusElement = document.getElementById(`status-${i}`);
        
        try {
          fileItem.className = 'file-item processing';
          statusElement.textContent = '처리중...';
          addDebugLog(`${file.name} 처리 시작`, 'info');
          
          // 파일 읽기
          const reader = new FileReader();
          const fileData = await new Promise((resolve, reject) => {
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = reject;
            reader.readAsArrayBuffer(file);
          });
          
          // Base64로 변환
          const base64Data = btoa(
            new Uint8Array(fileData).reduce(
              (data, byte) => data + String.fromCharCode(byte), ''
            )
          );
          
          // 시트 이름 추출 (파일명에서 확장자 제거)
          const sheetName = file.name.replace(/\.(xlsx|xls)$/, '');
          addDebugLog(`시트 이름: ${sheetName}`, 'info');
          
          // Google Apps Script로 전송
          await new Promise((resolve, reject) => {
            google.script.run
              .withSuccessHandler((result) => {
                fileItem.className = 'file-item success';
                statusElement.textContent = '완료';
                addDebugLog(`${file.name} 업로드 성공`, 'success');
                if (result.dateColumnsFixed) {
                  addDebugLog(`날짜 열 ${result.dateColumnsFixed}개 자동 변환됨`, 'info');
                }
                resolve();
              })
              .withFailureHandler((error) => {
                fileItem.className = 'file-item error';
                statusElement.textContent = `오류: ${error.message}`;
                addDebugLog(`${file.name} 업로드 실패: ${error.message}`, 'error');
                reject(error);
              })
              .uploadExcelFile(base64Data, sheetName);
          });
          
          // 진행률 업데이트
          const progress = ((i + 1) / selectedFiles.length) * 100;
          progressFill.style.width = `${progress}%`;
          
        } catch (error) {
          fileItem.className = 'file-item error';
          statusElement.textContent = '오류 발생';
          addDebugLog(`${file.name} 처리 중 오류: ${error.toString()}`, 'error');
        }
      }
      
      uploadButton.disabled = false;
      addDebugLog('모든 파일 처리 완료', 'success');
      
      // 3초 후 리셋
      setTimeout(() => {
        if (confirm('모든 파일이 처리되었습니다. 화면을 초기화하시겠습니까?')) {
          resetUploader();
        }
      }, 3000);
    });
    
    // 업로더 초기화
    function resetUploader() {
      selectedFiles = [];
      fileList.innerHTML = '';
      uploadButton.style.display = 'none';
      progressBar.style.display = 'none';
      progressFill.style.width = '0%';
      fileInput.value = '';
      addDebugLog('업로더 초기화됨', 'info');
    }
  </script>
</body>
</html>
